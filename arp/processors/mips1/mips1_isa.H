/******************************************************
 * Instruction Set Architecture header file.          *
 * This file is automatically generated by ArchC      *
 * WITHOUT WARRANTY OF ANY KIND, either express       *
 * or implied.                                        *
 * For more information on ArchC, please visit:       *
 * http://www.archc.org                               *
 *                                                    *
 * The ArchC Team                                     *
 * Computer Systems Laboratory (LSC)                  *
 * IC-UNICAMP                                         *
 * http://www.lsc.ic.unicamp.br                       *
 ******************************************************/
 

#ifndef _MIPS1_ISA_H
#define _MIPS1_ISA_H

#include "mips1_parms.H"
#include "ac_instr.H"
#include "ac_decoder_rt.H"
#include "ac_instr_info.H"
#include "mips1_arch.H"
#include "mips1_arch_ref.H"

namespace mips1_parms
{
class mips1_isa: public mips1_arch_ref {
private:
typedef ac_instr<AC_DEC_FIELD_NUMBER> ac_instr_t;

public:
  static ac_dec_field fields[AC_DEC_FIELD_NUMBER];
  static ac_dec_format formats[AC_DEC_FORMAT_NUMBER];
  static ac_dec_list dec_list[AC_DEC_LIST_NUMBER];
  static ac_dec_instr instructions[AC_DEC_INSTR_NUMBER];
  static const ac_instr_info instr_table[AC_DEC_INSTR_NUMBER + 1];

  ac_decoder_full* decoder;

  int cur_instr_id;

  //!Constructor.
  mips1_isa(mips1_arch& ref) : mips1_arch_ref(ref) {
    //!Building Decoder.
    decoder = ac_decoder_full::CreateDecoder(mips1_isa::formats, mips1_isa::instructions, &ref);
  }

  inline char* get_name() { return instr_table[cur_instr_id].ac_instr_name; }
  inline char* get_mnemonic() { return instr_table[cur_instr_id].ac_instr_mnemonic; }
  inline unsigned get_size() { return instr_table[cur_instr_id].ac_instr_size; };
  inline unsigned get_cycles() { return instr_table[cur_instr_id].ac_instr_cycles; };
  inline unsigned get_min_latency() { return instr_table[cur_instr_id].ac_instr_min_latency; };
  inline unsigned get_max_latency() { return instr_table[cur_instr_id].ac_instr_max_latency; };

  void _behavior_instruction(unsigned int op);

  void _behavior_begin();
  void _behavior_end();

  void _behavior_mips1_Type_R(unsigned int op, unsigned int rs, unsigned int rt, unsigned int rd, unsigned int shamt, unsigned int func);
  void _behavior_mips1_Type_I(unsigned int op, unsigned int rs, unsigned int rt, int imm);
  void _behavior_mips1_Type_J(unsigned int op, unsigned int addr);

  void behavior_lb(unsigned int op, unsigned int rs, unsigned int rt, int imm);
  void behavior_lbu(unsigned int op, unsigned int rs, unsigned int rt, int imm);
  void behavior_lh(unsigned int op, unsigned int rs, unsigned int rt, int imm);
  void behavior_lhu(unsigned int op, unsigned int rs, unsigned int rt, int imm);
  void behavior_lw(unsigned int op, unsigned int rs, unsigned int rt, int imm);
  void behavior_lwl(unsigned int op, unsigned int rs, unsigned int rt, int imm);
  void behavior_lwr(unsigned int op, unsigned int rs, unsigned int rt, int imm);
  void behavior_sb(unsigned int op, unsigned int rs, unsigned int rt, int imm);
  void behavior_sh(unsigned int op, unsigned int rs, unsigned int rt, int imm);
  void behavior_sw(unsigned int op, unsigned int rs, unsigned int rt, int imm);
  void behavior_swl(unsigned int op, unsigned int rs, unsigned int rt, int imm);
  void behavior_swr(unsigned int op, unsigned int rs, unsigned int rt, int imm);
  void behavior_addi(unsigned int op, unsigned int rs, unsigned int rt, int imm);
  void behavior_addiu(unsigned int op, unsigned int rs, unsigned int rt, int imm);
  void behavior_slti(unsigned int op, unsigned int rs, unsigned int rt, int imm);
  void behavior_sltiu(unsigned int op, unsigned int rs, unsigned int rt, int imm);
  void behavior_andi(unsigned int op, unsigned int rs, unsigned int rt, int imm);
  void behavior_ori(unsigned int op, unsigned int rs, unsigned int rt, int imm);
  void behavior_xori(unsigned int op, unsigned int rs, unsigned int rt, int imm);
  void behavior_lui(unsigned int op, unsigned int rs, unsigned int rt, int imm);
  void behavior_add(unsigned int op, unsigned int rs, unsigned int rt, unsigned int rd, unsigned int shamt, unsigned int func);
  void behavior_addu(unsigned int op, unsigned int rs, unsigned int rt, unsigned int rd, unsigned int shamt, unsigned int func);
  void behavior_sub(unsigned int op, unsigned int rs, unsigned int rt, unsigned int rd, unsigned int shamt, unsigned int func);
  void behavior_subu(unsigned int op, unsigned int rs, unsigned int rt, unsigned int rd, unsigned int shamt, unsigned int func);
  void behavior_slt(unsigned int op, unsigned int rs, unsigned int rt, unsigned int rd, unsigned int shamt, unsigned int func);
  void behavior_sltu(unsigned int op, unsigned int rs, unsigned int rt, unsigned int rd, unsigned int shamt, unsigned int func);
  void behavior_instr_and(unsigned int op, unsigned int rs, unsigned int rt, unsigned int rd, unsigned int shamt, unsigned int func);
  void behavior_instr_or(unsigned int op, unsigned int rs, unsigned int rt, unsigned int rd, unsigned int shamt, unsigned int func);
  void behavior_instr_xor(unsigned int op, unsigned int rs, unsigned int rt, unsigned int rd, unsigned int shamt, unsigned int func);
  void behavior_instr_nor(unsigned int op, unsigned int rs, unsigned int rt, unsigned int rd, unsigned int shamt, unsigned int func);
  void behavior_nop(unsigned int op, unsigned int rs, unsigned int rt, unsigned int rd, unsigned int shamt, unsigned int func);
  void behavior_sll(unsigned int op, unsigned int rs, unsigned int rt, unsigned int rd, unsigned int shamt, unsigned int func);
  void behavior_srl(unsigned int op, unsigned int rs, unsigned int rt, unsigned int rd, unsigned int shamt, unsigned int func);
  void behavior_sra(unsigned int op, unsigned int rs, unsigned int rt, unsigned int rd, unsigned int shamt, unsigned int func);
  void behavior_sllv(unsigned int op, unsigned int rs, unsigned int rt, unsigned int rd, unsigned int shamt, unsigned int func);
  void behavior_srlv(unsigned int op, unsigned int rs, unsigned int rt, unsigned int rd, unsigned int shamt, unsigned int func);
  void behavior_srav(unsigned int op, unsigned int rs, unsigned int rt, unsigned int rd, unsigned int shamt, unsigned int func);
  void behavior_mult(unsigned int op, unsigned int rs, unsigned int rt, unsigned int rd, unsigned int shamt, unsigned int func);
  void behavior_multu(unsigned int op, unsigned int rs, unsigned int rt, unsigned int rd, unsigned int shamt, unsigned int func);
  void behavior_div(unsigned int op, unsigned int rs, unsigned int rt, unsigned int rd, unsigned int shamt, unsigned int func);
  void behavior_divu(unsigned int op, unsigned int rs, unsigned int rt, unsigned int rd, unsigned int shamt, unsigned int func);
  void behavior_mfhi(unsigned int op, unsigned int rs, unsigned int rt, unsigned int rd, unsigned int shamt, unsigned int func);
  void behavior_mthi(unsigned int op, unsigned int rs, unsigned int rt, unsigned int rd, unsigned int shamt, unsigned int func);
  void behavior_mflo(unsigned int op, unsigned int rs, unsigned int rt, unsigned int rd, unsigned int shamt, unsigned int func);
  void behavior_mtlo(unsigned int op, unsigned int rs, unsigned int rt, unsigned int rd, unsigned int shamt, unsigned int func);
  void behavior_j(unsigned int op, unsigned int addr);
  void behavior_jal(unsigned int op, unsigned int addr);
  void behavior_jr(unsigned int op, unsigned int rs, unsigned int rt, unsigned int rd, unsigned int shamt, unsigned int func);
  void behavior_jalr(unsigned int op, unsigned int rs, unsigned int rt, unsigned int rd, unsigned int shamt, unsigned int func);
  void behavior_beq(unsigned int op, unsigned int rs, unsigned int rt, int imm);
  void behavior_bne(unsigned int op, unsigned int rs, unsigned int rt, int imm);
  void behavior_blez(unsigned int op, unsigned int rs, unsigned int rt, int imm);
  void behavior_bgtz(unsigned int op, unsigned int rs, unsigned int rt, int imm);
  void behavior_bltz(unsigned int op, unsigned int rs, unsigned int rt, int imm);
  void behavior_bgez(unsigned int op, unsigned int rs, unsigned int rt, int imm);
  void behavior_bltzal(unsigned int op, unsigned int rs, unsigned int rt, int imm);
  void behavior_bgezal(unsigned int op, unsigned int rs, unsigned int rt, int imm);
  void behavior_sys_call(unsigned int op, unsigned int rs, unsigned int rt, unsigned int rd, unsigned int shamt, unsigned int func);
  void behavior_instr_break(unsigned int op, unsigned int rs, unsigned int rt, unsigned int rd, unsigned int shamt, unsigned int func);

};
};



#endif //_MIPS1_ISA_H

